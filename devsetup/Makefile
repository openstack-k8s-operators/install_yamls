CRC_URL ?= 'https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz'
KUBEADMIN_PWD ?= 12345678
PULL_SECRET  ?= ${PWD}/pull-secret.txt
EDPM_COMPUTE_SUFFIX ?= 0
EDPM_COMPUTE_IP ?= 192.168.122.139
OPENSTACK_RUNNER_IMG ?= quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest
EDPM_NETWORK_CONFIG_TEMPLATE ?= templates/net_config_bridge.j2
EDPM_SSHD_ALLOWED_RANGES ?= ['192.168.122.0/24']

##@ General

# The help target prints out all targets with their descriptions organized
# beneath their categories. The categories are represented by '##@' and the
# target descriptions by '##'. The awk commands is responsible for reading the
# entire set of makefiles included in this invocation, looking for lines of the
# file as xyz: ## something, and then pretty-format the target and help. Then,
# if there's a line with ##@ something, that gets pretty-printed as a category.
# More info on the usage of ANSI control characters for terminal formatting:
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
# More info on the awk command:
# http://linuxcommand.org/lc3_adv_awk.php

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ CRC
.PHONY: crc
crc: ## Deploys CRC using CRC_URL to download and install CRC, KUBEADMIN_PWD as the password which defaults to 12345678 and PULL_SECRET to specify the file containing the pull secret, defaults to ${PWD}/pull-secret.txt. To change the default memory and/or cpus for the VM use `CPUS=X MEMORY=Y DISK=Z make crc`.
	bash scripts/crc-setup.sh ${CRC_URL} ${KUBEADMIN_PWD} ${PULL_SECRET}

.PHONY: crc_cleanup
crc_cleanup: ## Destroys the CRC env, but does NOT clear ( --clear-cache ) the cache to save time on next setup.
	crc delete --force
	crc cleanup
	sudo rm -f /etc/pki/ca-trust/source/anchors/crc-router-ca.pem
	sudo update-ca-trust

##@ Download required tools and versions
.PHONY: download_tools
download_tools: ## Runs an ansible playbook to install required tools with the versions to develop the service operators. The tools get installed in ~/bin and go in /usr/local/go (alternatives get used to set it as the system wide go version)
	ANSIBLE_FORCE_COLOR=true ansible-playbook \
	-v -i hosts \
	download_tools.yaml

.PHONY: crc_attach_default_interface
crc_attach_default_interface:
	sudo virsh attach-interface crc --source default --type network --model virtio --config --persistent

.PHONY: edpm_compute
edpm_compute:
	scripts/gen-ansibleee-ssh-key.sh
	scripts/gen-edpm-compute-node.sh ${EDPM_COMPUTE_SUFFIX}

.PHONY: edpm_compute_cleanup
edpm_compute_cleanup:
	-sudo virsh destroy edpm-compute-${EDPM_COMPUTE_SUFFIX}
	-sudo virsh undefine edpm-compute-${EDPM_COMPUTE_SUFFIX}
	rm -f ${HOME}/.crc/machines/crc/edpm-compute-${EDPM_COMPUTE_SUFFIX}.qcow2
	rm -f ../out/edpm/edpm-compute-*-id_rsa.pub
	oc delete -f ../out/edpm/ansibleee-ssh-key-secret.yaml

.PHONY: edpm_play
edpm_play:
	sed -e "s|_COMPUTE_IP_|${EDPM_COMPUTE_IP}|g" \
	    -e "s|_OPENSTACK_RUNNER_IMG_|${OPENSTACK_RUNNER_IMG}|g" \
	    -e "s|_EDPM_NETWORK_CONFIG_TEMPLATE_|${EDPM_NETWORK_CONFIG_TEMPLATE}|g" \
	    -e "s|_EDPM_SSHD_ALLOWED_RANGES_|${EDPM_SSHD_ALLOWED_RANGES}|g" \
	    edpm/edpm-play.yaml | oc create -f -

.PHONY: edpm_play_cleanup
edpm_play_cleanup:
	-oc delete openstackansibleee deploy-external-dataplane-compute

.PHONY: ansible_role_sync
ansible_role_sync:
	cd ../ci/roles/use_install_yamls; rm -f defaults/main.yaml vars/command_after_make_target.yaml templates/install_yamls.sh.j2;
	cd ../ci/scripts; python makefile_to_install_yamls.py ../../Makefile;
	tree ../ci/roles/use_install_yamls;